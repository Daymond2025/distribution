import 'dart:convert';
import 'dart:io';
import 'dart:typed_data';
import 'package:flutter/material.dart';
import 'package:flutter_local_notifications/flutter_local_notifications.dart';
import 'package:distribution_frontend/notification_screen.dart';
import 'package:firebase_messaging/firebase_messaging.dart';
import 'package:distribution_frontend/main.dart';
import 'package:http/http.dart' as http;
import 'package:shared_preferences/shared_preferences.dart';

/// Fonction ex√©cut√©e quand une notif arrive en background
Future<void> onBackgroundMessage(RemoteMessage message) async {
  // Ne pas utiliser debugPrint ici
  // Optionnel : tu peux pr√©parer une notification locale ici, si n√©cessaire
}

class FirebaseApi {
  final _firebaseMessaging = FirebaseMessaging.instance;

  static final FlutterLocalNotificationsPlugin _localNotifications =
      FlutterLocalNotificationsPlugin();

  static const AndroidNotificationChannel androidChannel =
      AndroidNotificationChannel(
    'high_importance_channel',
    'High Importance Notifications',
    description: 'This channel is used for important notifications.',
    importance: Importance.high,
  );

  void handleMessage(RemoteMessage? message) {
    if (message == null) return;

    navigatorKey.currentState?.pushNamed(
      NotificationScreen.routeName,
      arguments: message,
    );
  }

  Future<void> initLocalNotifications() async {
    const android = AndroidInitializationSettings('@mipmap/ic_launcher');
    const ios = DarwinInitializationSettings();

    const settings = InitializationSettings(android: android, iOS: ios);

    await _localNotifications.initialize(
      settings,
      onDidReceiveNotificationResponse: (response) {
        final payload = response.payload;
        if (payload != null) {
          handleMessage(RemoteMessage.fromMap(jsonDecode(payload)));
        }
      },
    );

    final androidPlugin =
        _localNotifications.resolvePlatformSpecificImplementation<
            AndroidFlutterLocalNotificationsPlugin>();
    await androidPlugin?.createNotificationChannel(androidChannel);
  }

  Future<void> initPushNotifications() async {
    await _firebaseMessaging.setForegroundNotificationPresentationOptions(
      alert: true,
      badge: true,
      sound: true,
    );

    FirebaseMessaging.instance.getInitialMessage().then(handleMessage);
    FirebaseMessaging.onMessageOpenedApp.listen(handleMessage);
    FirebaseMessaging.onBackgroundMessage(onBackgroundMessage);

    FirebaseMessaging.onMessage.listen((message) async {
      final notification = message.notification;
      if (notification == null) return;

      final imageUrl = message.data['image'];

      BigPictureStyleInformation? styleInfo;
      if (imageUrl != null && imageUrl.isNotEmpty) {
        try {
          final imageBytes = await _downloadImage(imageUrl);
          styleInfo = BigPictureStyleInformation(
            ByteArrayAndroidBitmap(imageBytes),
            largeIcon: const DrawableResourceAndroidBitmap('notification_icon'),
            contentTitle: notification.title,
            summaryText: notification.body,
          );
        } catch (e) {
          debugPrint('‚ö†Ô∏è Erreur lors du chargement de l\'image : $e');
        }
      }

      _localNotifications.show(
        notification.hashCode,
        notification.title,
        notification.body,
        NotificationDetails(
          android: AndroidNotificationDetails(
            androidChannel.id,
            androidChannel.name,
            channelDescription: androidChannel.description,
            importance: Importance.high,
            priority: Priority.high,
            icon: 'notification_icon',
            styleInformation: styleInfo,
          ),
        ),
        payload: jsonEncode(message.toMap()),
      );
    });
  }

  /// T√©l√©charger l‚Äôimage depuis une URL pour l‚Äôaffichage enrichi
  Future<Uint8List> _downloadImage(String url) async {
    final response = await http.get(Uri.parse(url));
    if (response.statusCode == 200) {
      return response.bodyBytes;
    } else {
      throw Exception('√âchec du t√©l√©chargement de l‚Äôimage');
    }
  }

  Future<String?> getToken() async {
    try {
      final token = await _firebaseMessaging.getToken();
      debugPrint('üéØ Token FCM r√©cup√©r√©: $token');
      return token;
    } catch (e) {
      debugPrint('‚ùå Erreur lors de la r√©cup√©ration du token FCM: $e');
      return null;
    }
  }

  Future<void> sendTokenToBackend(String token, String bearerToken) async {
    if (token.isEmpty || bearerToken.isEmpty) {
      debugPrint('‚ö†Ô∏è Token ou bearerToken vide, envoi annul√©');
      return;
    }

    try {
      final response = await http.post(
        Uri.parse('https://v2.daymondboutique.com/api/v2/fcm-token'),
        headers: {
          'Authorization': 'Bearer $bearerToken',
          'Content-Type': 'application/json',
        },
        body: jsonEncode({
          'token': token,
          'device_type': Platform.isAndroid ? 'android' : 'ios',
        }),
      );

      if (response.statusCode == 200) {
        debugPrint('‚úÖ Token FCM envoy√© avec succ√®s au backend');
      } else {
        debugPrint(
            '‚ùå √âchec de l\'envoi du token: ${response.statusCode} ${response.body}');
      }
    } catch (e) {
      debugPrint('‚ùå Exception HTTP lors de l\'envoi du token: $e');
    }
  }

  Future<void> initNotifications() async {
    try {
      // üîê 1. Demander les permissions utilisateur
      final settings = await _firebaseMessaging.requestPermission();
      switch (settings.authorizationStatus) {
        case AuthorizationStatus.authorized:
          debugPrint('‚úÖ Permission de notifications accord√©e.');
          break;
        case AuthorizationStatus.denied:
          debugPrint('‚ùå Permission de notifications refus√©e.');
          return;
        case AuthorizationStatus.notDetermined:
          debugPrint(
              '‚ö†Ô∏è L‚Äôutilisateur n‚Äôa pas encore r√©pondu √† la demande de permission.');
          return;
        case AuthorizationStatus.provisional:
          debugPrint('‚ÑπÔ∏è Permission de notifications provisoire.');
          break;
      }

      // üîÑ 2. Initialiser les services de notification
      await initPushNotifications();
      await initLocalNotifications();

      // üéØ 3. R√©cup√©rer le token FCM (et le r√©g√©n√©rer si vide)
      String? fcmToken = await _firebaseMessaging.getToken();
      if (fcmToken == null || fcmToken.isEmpty) {
        debugPrint("‚ö†Ô∏è Token FCM vide, tentative de r√©g√©n√©ration...");
        await _firebaseMessaging.deleteToken();
        fcmToken = await _firebaseMessaging.getToken();
      }

      if (fcmToken == null || fcmToken.isEmpty) {
        debugPrint("‚ùå Impossible de r√©cup√©rer un token FCM valide.");
        return;
      }

      debugPrint('üì° Token FCM final : $fcmToken');

      // üîê 4. R√©cup√©rer le bearer token (auth utilisateur)
      final prefs = await SharedPreferences.getInstance();
      final bearerToken = prefs.getString('token');

      if (bearerToken == null || bearerToken.isEmpty) {
        debugPrint('‚ùå Bearer token manquant. Token FCM non envoy√©.');
        return;
      }

      // üì§ 5. Envoi au backend
      debugPrint('üì§ Envoi automatique du token FCM au backend...');
      await sendTokenToBackend(fcmToken, bearerToken);
    } catch (e, stackTrace) {
      debugPrint('‚ùå Erreur dans initNotifications : $e');
      debugPrint('üìç StackTrace : $stackTrace');
    }
  }
}
